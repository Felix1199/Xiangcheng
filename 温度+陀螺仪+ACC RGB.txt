//温度大于30度，RGB红，停止运动
//陀螺仪角度过大。RGB红，停止运动
//ACC RGB绿蓝黄红




#include <Wire.h>
#include <MeMCore.h>

// 距离保持阈值
const int maxDistance = 20; // 20 cm
const int targetDistance = 10; // 10 cm
const int stopDistance = 5; // 5 cm

// 电机速度
const int maxSpeed = 255; // 最大速度
const int baseSpeed = 150; // 基础速度
const int minSpeed = 80; // 最小速度

int currentSpeedLeft = baseSpeed;
int currentSpeedRight = baseSpeed;

// 陀螺仪传感器
MeGyro gyro(PORT_4); // 使用实际的I2C地址

// 超声波传感器
MeUltrasonicSensor ultraSensor(PORT_1);
MeDCMotor motorLeft(M1);
MeDCMotor motorRight(M2);

// 初始化温度传感器
MeTemperature temperatureSensor(PORT_3); // 假设温度传感器连接到PORT_3（A0）

// RGB LED灯
MeRGBLed led(PORT_1, 4); // 初始化RGB LED灯，指定数量为4

// 运行时间限制
const long runTime = 10000; // 10秒 = 10000毫秒
long startTime;

void setLEDColor(uint8_t red, uint8_t green, uint8_t blue) {
  for(uint8_t t = 0; t < 4; t++) { // 遍历4个LED灯
    led.setColorAt(t, red, green, blue); // 设置每个LED灯的颜色
  }
  led.show();
}

void setup() {
  Serial.begin(9600);
  Wire.begin();

  // 初始化陀螺仪传感器
  gyro.begin();
  delay(2000); // 等待陀螺仪稳定

  // 初始化LED灯
  led.show();

  // 记录开始时间
  startTime = millis();
}

void loop() {
  // 获取当前时间
  unsigned long currentTime = millis();
  
  // 检查是否超过运行时间
  if (currentTime - startTime >= runTime) {
    // 停止电机
    motorLeft.run(0);
    motorRight.run(0);
    Serial.println("程序结束");
    while (true); // 停止在此
  }

  // 更新陀螺仪数据
  gyro.update();
  float pitch = gyro.getAngleX();
  float roll = gyro.getAngleY();
  float yaw = gyro.getAngleZ();

  // 读取超声波传感器距离
  long distance = ultraSensor.distanceCm();

  // 读取温度值
  float temperature = temperatureSensor.temperature();

  // 检查温度是否高于30度
  if (temperature > 30.0) {
    setLEDColor(255, 0, 0); // 红色
    motorLeft.run(0);
    motorRight.run(0);
    Serial.println("温度过高，停止运行");
    while (true); // 停止在此
  }

  // 检查陀螺仪角度是否大于45度
  if (abs(pitch) > 45 || abs(roll) > 45 || abs(yaw) > 45) {
    setLEDColor(255, 0, 0); // 红色
    motorLeft.run(0);
    motorRight.run(0);
    Serial.println("角度过大，停止运行");
    while (true); // 停止在此
  }

  // 初始速度设为基础速度
  int speedLeft = baseSpeed;
  int speedRight = baseSpeed;

  // 根据距离调整速度和LED颜色
  if (distance < stopDistance) {
    // 距离小于5cm，停止
    speedLeft = 0;
    speedRight = 0;
    setLEDColor(255, 0, 0); // 红色
  } else if (distance <= targetDistance) {
    // 距离在5cm和10cm之间，减速
    speedLeft = minSpeed;
    speedRight = minSpeed;
    setLEDColor(255, 255, 0); // 黄色
  } else if (distance <= maxDistance) {
    // 距离在10cm和20cm之间，基础速度
    speedLeft = baseSpeed;
    speedRight = baseSpeed;
    setLEDColor(0, 0, 255); // 蓝色
  } else {
    // 距离大于20cm，加速
    speedLeft = maxSpeed;
    speedRight = maxSpeed;
    setLEDColor(0, 255, 0); // 绿色
  }

  // 设置电机速度
  motorLeft.run(-speedLeft); // 反转M1电机速度
  motorRight.run(speedRight); // 保持M2电机速度

  // 打印调试信息
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm, Speed L: ");
  Serial.print(speedLeft);
  Serial.print(", Speed R: ");
  Serial.print(speedRight);
  Serial.print(", Pitch: ");
  Serial.print(pitch);
  Serial.print(", Roll: ");
  Serial.print(roll);
  Serial.print(", Yaw: ");
  Serial.print(yaw);
  Serial.print(", Temperature: ");
  Serial.print(temperature);
  Serial.println(" C");

  delay(100); // 延时100毫秒
}
