//控制舵机在上下坡时运动
//上下坡minspeed+RGB黄色
//当温度小于25度时，RGB LED亮绿色。
//当温度在25-30度之间时，RGB LED亮蓝色。
//当温度大于30度时，RGB LED亮红色。
//坡度过大，停止
//ACC


#include <Wire.h>
#include <MeMCore.h>

// 距离保持阈值
const int maxDistance = 30; // 30 cm
const int targetDistance = 20; // 20 cm
const int stopDistance = 10; // 10 cm

// 电机速度
const int maxSpeed = 255; // 最大速度
const int baseSpeed = 180; // 基础速度
const int minSpeed = 120; // 最小速度

int currentSpeedLeft = baseSpeed;
int currentSpeedRight = baseSpeed;

// 陀螺仪传感器
MeGyro gyro(PORT_4); // 使用实际的I2C地址

// 超声波传感器
MeUltrasonicSensor ultraSensor(PORT_3);
MeDCMotor motorLeft(M1);
MeDCMotor motorRight(M2);

// 初始化温度传感器
MeTemperature temperatureSensor(PORT_1); // 假设温度传感器连接到PORT_1
MePort port(PORT_1);
Servo myservo1;  // 创建控制舵机的舵机对象

// RGB LED灯
MeRGBLed led(PORT_2, 4); // 初始化RGB LED灯，指定数量为4

int16_t servo1pin = port.pin1(); // 将舵机连接到PORT_1的SLOT1

// 运行时间限制
const long runTime = 10000; // 10秒 = 10000毫秒
long startTime;

void setLEDColor(uint8_t red, uint8_t green, uint8_t blue) {
  for (uint8_t t = 0; t < 4; t++) { // 遍历4个LED灯
    led.setColorAt(t, red, green, blue); // 设置每个LED灯的颜色
  }
  led.show();
}

void setup() {
  Serial.begin(9600);
  Wire.begin();

  // 初始化陀螺仪传感器
  gyro.begin();
  delay(2000); // 等待陀螺仪稳定

  // 初始化舵机
  myservo1.attach(servo1pin);  // 将舵机连接到servo1pin

  // 初始化LED灯
  led.show();

  // 记录开始时间
  startTime = millis();
}

void loop() {
  // 获取当前时间
  unsigned long currentTime = millis();
  
  // 检查是否超过运行时间
  if (currentTime - startTime >= runTime) {
    // 停止电机
    motorLeft.run(0);
    motorRight.run(0);
    Serial.println("程序结束");
    while (true); // 停止在此
  }

  // 更新陀螺仪数据
  gyro.update();
  float pitch = gyro.getAngleY();
  float roll = gyro.getAngleZ();
  float yaw = gyro.getAngleX();

  // 读取超声波传感器距离
  long distance = ultraSensor.distanceCm();

  // 读取温度值
  float temperature = temperatureSensor.temperature();

  // 初始速度设为基础速度
  int speedLeft = baseSpeed;
  int speedRight = baseSpeed;

  // 检查是否超过角度阈值
  if (abs(pitch) > 25 || abs(roll) > 25 || abs(yaw) > 25) {
    // 停止电机
    motorLeft.run(0);
    motorRight.run(0);
    // 设置LED灯为红色
    setLEDColor(255, 0, 0);
    Serial.println("角度过大，停止运动");
    while (true); // 停止在此
  }

  // 检查坡度变化
  bool isSlope = (pitch > 10 || roll > 10 || pitch < -10 || roll < -10);
  bool isUphill = (pitch > 10 || roll > 10);
  bool isDownhill = (pitch < -10 || roll < -10);

  // 根据距离调整速度
  if (isSlope) {
    // 如果检测到坡度变化，无论距离多少，都以minSpeed行驶
    speedLeft = minSpeed;
    speedRight = minSpeed;
  } else {
    if (distance < stopDistance) {
      // 距离小于10cm，停止
      speedLeft = 0;
      speedRight = 0;
    } else if (distance <= targetDistance) {
      // 距离在10cm和20cm之间，减速
      speedLeft = minSpeed;
      speedRight = minSpeed;
    } else if (distance <= maxDistance) {
      // 距离在20cm和30cm之间，基础速度
      speedLeft = baseSpeed;
      speedRight = baseSpeed;
    } else {
      // 距离大于30cm，加速
      speedLeft = maxSpeed;
      speedRight = maxSpeed;
    }
  }

  // 设置电机速度
  motorLeft.run(-speedLeft); // 反转M1电机速度
  motorRight.run(speedRight); // 保持M2电机速度

  // 控制舵机在上下坡时运动
  if (isUphill) {
    myservo1.write(0);      // 逆时针转到0度
    Serial.println("舵机角度: 0 度");
  } else if (isDownhill) {
    myservo1.write(180);    // 顺时针转到180度
    Serial.println("舵机角度: 180 度");
  } else {
    myservo1.write(90);     // 正常位置
    Serial.println("舵机角度: 90 度");
  }

  // 根据温度值和坡度设置LED灯颜色
  if (abs(pitch) > 45 || abs(roll) > 45 || abs(yaw) > 45) {
    setLEDColor(255, 0, 0); // 角度大于45度时显示红色
  } else if (isSlope) {
    setLEDColor(255, 255, 0); // 黄色
  } else {
    // 根据温度设置颜色
    if (temperature > 30.0) {
      setLEDColor(255, 0, 0); // 红色
    } else if (temperature >= 25.0 && temperature <= 30.0) {
      setLEDColor(0, 0, 255); // 蓝色
    } else if (temperature < 25.0) {
      setLEDColor(0, 255, 0); // 绿色
    } else {
      setLEDColor(0, 0, 0); // 关闭LED灯
    }
  }

  // 打印调试信息
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm, Speed L: ");
  Serial.print(speedLeft);
  Serial.print(", Speed R: ");
  Serial.print(speedRight);
  Serial.print(", Pitch: ");
  Serial.print(pitch);
  Serial.print(", Roll: ");
  Serial.print(roll);
  Serial.print(", Yaw: ");
  Serial.print(yaw);
  Serial.print(", Temperature: ");
  Serial.print(temperature);
  Serial.println(" C");

  delay(100); // 延时100毫秒
}
