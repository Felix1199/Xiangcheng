// Control the servo during uphill and downhill movement
// Uphill and downhill: minSpeed + RGB Yellow
// When the temperature is below 25 degrees, the RGB LED lights up green.
// When the temperature is between 25 and 30 degrees, the RGB LED lights up blue.
// When the temperature is above 30 degrees, the RGB LED lights up red.
// If the slope is too steep, stop.
// ACC

#include <Wire.h>
#include <MeMCore.h>

// Distance thresholds
const int maxDistance = 30; // 30 cm
const int targetDistance = 20; // 20 cm
const int stopDistance = 10; // 10 cm

// Motor speeds
const int maxSpeed = 255; // Maximum speed
const int baseSpeed = 180; // Base speed
const int minSpeed = 120; // Minimum speed

int currentSpeedLeft = baseSpeed;
int currentSpeedRight = baseSpeed;

// Gyroscope sensor
MeGyro gyro(PORT_4); // Use the actual I2C address

// Ultrasonic sensor
MeUltrasonicSensor ultraSensor(PORT_3);
MeDCMotor motorLeft(M1);
MeDCMotor motorRight(M2);

// Initialize temperature sensor
MeTemperature temperatureSensor(PORT_1); // Assume the temperature sensor is connected to PORT_1
MePort port(PORT_1);
Servo myservo1;  // Create a servo object to control the servo

// RGB LED lights
MeRGBLed led(PORT_2, 4); // Initialize RGB LED lights, specifying the number as 4

int16_t servo1pin = port.pin1(); // Connect the servo to SLOT1 of PORT_1

// Runtime limit
const long runTime = 10000; // 10 seconds = 10000 milliseconds
long startTime;

void setLEDColor(uint8_t red, uint8_t green, uint8_t blue) {
  for (uint8_t t = 0; t < 4; t++) { // Iterate through 4 LED lights
    led.setColorAt(t, red, green, blue); // Set the color of each LED light
  }
  led.show();
}

void setup() {
  Serial.begin(9600);
  Wire.begin();

  // Initialize gyroscope sensor
  gyro.begin();
  delay(2000); // Wait for the gyroscope to stabilize

  // Initialize the servo
  myservo1.attach(servo1pin);  // Connect the servo to servo1pin

  // Initialize LED lights
  led.show();

  // Record the start time
  startTime = millis();
}

void loop() {
  // Get the current time
  unsigned long currentTime = millis();
  
  // Check if the runtime has exceeded
  if (currentTime - startTime >= runTime) {
    // Stop the motors
    motorLeft.run(0);
    motorRight.run(0);
    Serial.println("Program ended");
    while (true); // Stop here
  }

  // Update gyroscope data
  gyro.update();
  float pitch = gyro.getAngleY();
  float roll = gyro.getAngleZ();
  float yaw = gyro.getAngleX();

  // Read the ultrasonic sensor distance
  long distance = ultraSensor.distanceCm();

  // Read the temperature value
  float temperature = temperatureSensor.temperature();

  // Initial speed set to base speed
  int speedLeft = baseSpeed;
  int speedRight = baseSpeed;

  // Check if the angle exceeds the threshold
  if (abs(pitch) > 25 || abs(roll) > 25 || abs(yaw) > 25) {
    // Stop the motors
    motorLeft.run(0);
    motorRight.run(0);
    // Set LED lights to red
    setLEDColor(255, 0, 0);
    Serial.println("Angle too large, stopping movement");
    while (true); // Stop here
  }

  // Check for slope changes
  bool isSlope = (pitch > 10 || roll > 10 || pitch < -10 || roll < -10);
  bool isUphill = (pitch > 10 || roll > 10);
  bool isDownhill = (pitch < -10 || roll < -10);

  // Adjust speed based on distance
  if (isSlope) {
    // If a slope is detected, travel at minSpeed regardless of distance
    speedLeft = minSpeed;
    speedRight = minSpeed;
  } else {
    if (distance < stopDistance) {
      // Distance less than 10 cm, stop
      speedLeft = 0;
      speedRight = 0;
    } else if (distance <= targetDistance) {
      // Distance between 10 cm and 20 cm, slow down
      speedLeft = minSpeed;
      speedRight = minSpeed;
    } else if (distance <= maxDistance) {
      // Distance between 20 cm and 30 cm, base speed
      speedLeft = baseSpeed;
      speedRight = baseSpeed;
    } else {
      // Distance greater than 30 cm, speed up
      speedLeft = maxSpeed;
      speedRight = maxSpeed;
    }
  }

  // Set motor speeds
  motorLeft.run(-speedLeft); // Reverse M1 motor speed
  motorRight.run(speedRight); // Maintain M2 motor speed

  // Control servo during uphill and downhill movement
  if (isUphill) {
    myservo1.write(0);      // Rotate counterclockwise to 0 degrees
    Serial.println("Servo angle: 0 degrees");
  } else if (isDownhill) {
    myservo1.write(180);    // Rotate clockwise to 180 degrees
    Serial.println("Servo angle: 180 degrees");
  } else {
    myservo1.write(90);     // Normal position
    Serial.println("Servo angle: 90 degrees");
  }

  // Set LED light color based on temperature and slope
  if (abs(pitch) > 45 || abs(roll) > 45 || abs(yaw) > 45) {
    setLEDColor(255, 0, 0); // Red when angle is greater than 45 degrees
  } else if (isSlope) {
    setLEDColor(255, 255, 0); // Yellow for slope
  } else {
    // Set color based on temperature
    if (temperature > 30.0) {
      setLEDColor(255, 0, 0); // Red
    } else if (temperature >= 25.0 && temperature <= 30.0) {
      setLEDColor(0, 0, 255); // Blue
    } else if (temperature < 25.0) {
      setLEDColor(0, 255, 0); // Green
    } else {
      setLEDColor(0, 0, 0); // Turn off LED lights
    }
  }

  // Print debug information
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm, Speed L: ");
  Serial.print(speedLeft);
  Serial.print(", Speed R: ");
  Serial.print(speedRight);
  Serial.print(", Pitch: ");
  Serial.print(pitch);
  Serial.print(", Roll: ");
  Serial.print(roll);
  Serial.print(", Yaw: ");
  Serial.print(yaw);
  Serial.print(", Temperature: ");
  Serial.print(temperature);
  Serial.println(" C");

  delay(100); // Delay 100 milliseconds
}

